# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import plotly.express as px
from nav import navbar # Importation potentielle de la barre de navigation

# -------------------------------
# Configuration de la Page
# -------------------------------
st.set_page_config(page_title="Tableau de Bord NBA", layout="wide") # Configure le titre de la page et la disposition large

# -------------------------------
# Affichage de la Barre de Navigation
# -------------------------------
# Note : La barre de navigation est actuellement impl√©ment√©e directement via st.page_link
# Pour une impl√©mentation modulable, l'utilisation de la fonction navbar() import√©e serait envisag√©e.
c1, c2, c3, c4,c5 = st.columns(5) # Cr√©e 5 colonnes pour les liens de navigation
with c1: st.page_link("home.py",                   label="üè† Accueil") # Lien vers la page d'accueil
with c2: st.page_link("pages/1_Team.py",           label="üèÄ √âquipe") # Lien vers la page d'√©quipe
with c3: st.page_link("pages/2_Statistics.py",     label="üìä Statistiques") # Lien vers la page de statistiques
with c4: st.page_link("pages/3_Champ_Historic.py", label="üèÜ Historique") # Lien vers la page historique des champions
with c5: st.page_link("pages/4_Trade_Machine.py",  label="üí∏ Machine √† Trade") # Lien vers la machine √† trade


# -------------------------------
# Chargement des Donn√©es
# -------------------------------
df_west = pd.read_excel("data/df_western_conf_standing.xlsx") # Charge les classements de la Conf√©rence Ouest
df_east = pd.read_excel("data/df_eastern_conf_standing.xlsx") # Charge les classements de la Conf√©rence Est
df_team_ratings = pd.read_excel("data/df_nba_team_reg_season_ratings.xlsx") # Charge les √©valuations des √©quipes de saison r√©guli√®re
df_players = pd.read_excel("data/df_reg_season_players_filtered.xlsx") # Charge les donn√©es filtr√©es des joueurs de saison r√©guli√®re
df_salaries = pd.read_excel("data/df_nba_players_salaries.xlsx") # Charge les salaires des joueurs

# Applique un filtre additionnel aux joueurs : uniquement ceux ayant jou√© plus de 10 matchs et plus de 10 minutes par match
df_players = df_players[(df_players["GP"] > 10) & (df_players["MIN_PG"] > 10)]


# -------------------------------
# Titre de la Page
# -------------------------------
st.markdown(
    "<h1 style='text-align: center;'>üèÄ Aper√ßu NBA 2024-25</h1>",
    unsafe_allow_html=True # Permet le rendu HTML
)
st.markdown(
    "<h4 style='text-align: center; color: gray;'>Un Regard Global sur la Ligue</h4>",
    unsafe_allow_html=True # Permet le rendu HTML
)


# -------------------------------
# Onglets de Navigation
# -------------------------------
# Cr√©e des onglets pour organiser le contenu de la page
tab1, tab2, tab3, tab4 = st.tabs([
    "üèÜ Classements des Conf√©rences",
    "‚≠ê Meilleurs Joueurs",
    "üìä √âvaluations des √âquipes",
    "üí∞ Salaires"
])

# -------------------------------
# Contenu de l'Onglet 1 : Classements des Conf√©rences
# -------------------------------
with tab1:
    st.markdown("## üèÜ Classements des Conf√©rences") # Titre de l'onglet

    col1, col2 = st.columns(2) # Cr√©e deux colonnes pour afficher les conf√©rences c√¥te √† c√¥te
    with col1:
        st.markdown("### Conf√©rence Ouest") # Sous-titre pour la Conf√©rence Ouest
        st.dataframe(df_west, hide_index=True, use_container_width=True) # Affiche le DataFrame de la Conf√©rence Ouest
    with col2:
        st.markdown("### Conf√©rence Est") # Sous-titre pour la Conf√©rence Est
        st.dataframe(df_east, hide_index=True, use_container_width=True) # Affiche le DataFrame de la Conf√©rence Est

# -------------------------------
# Contenu de l'Onglet 2 : Meilleurs Joueurs
# -------------------------------
with tab2:
    st.markdown("## ‚≠ê Top 3 des Joueurs par M√©triques Cl√©s") # Titre de l'onglet

    # Filtre de s√©lection d'√©quipe unique avec l'option "Toutes les √©quipes"
    all_teams = sorted(df_players["TEAM"].dropna().unique()) # R√©cup√®re la liste unique des √©quipes
    team_choice = st.selectbox(
        "√âquipe",
        options=["Toutes les √©quipes"] + all_teams, # Ajoute "Toutes les √©quipes" comme premi√®re option
        index=0, # S√©lectionne la premi√®re option par d√©faut
        key="top_players_team_filter_single" # Cl√© unique pour le widget
    )

    # Applique le filtre localement
    df_tp = df_players.copy() # Cr√©e une copie du DataFrame des joueurs
    if team_choice != "Toutes les √©quipes": # Si une √©quipe sp√©cifique est choisie
        df_tp = df_tp[df_tp["TEAM"] == team_choice] # Filtre le DataFrame par l'√©quipe s√©lectionn√©e

    metrics = {
        "Points Par Match": "PTS_PG",
        "Rebonds Par Match": "REB_PG",
        "Passes D√©cisives Par Match": "AST_PG"
    } # Dictionnaire des m√©triques √† afficher

    # It√®re sur chaque m√©trique pour afficher les 3 meilleurs joueurs
    for label, col_name in metrics.items():
        if col_name not in df_tp.columns: # V√©rifie si la colonne existe dans le DataFrame
            st.warning(f"La colonne '{col_name}' n'a pas √©t√© trouv√©e dans les donn√©es des joueurs.")
            continue # Passe √† la m√©trique suivante si la colonne est manquante

        top3 = (
            df_tp[["PLAYER_NAME", "TEAM", col_name]] # S√©lectionne les colonnes Joueur, √âquipe et la m√©trique
            .sort_values(by=col_name, ascending=False) # Trie par la m√©trique en ordre d√©croissant
            .head(3) # Prend les 3 premiers joueurs
        )
        st.markdown(f"### {label}") # Affiche le titre de la m√©trique
        st.dataframe(top3, hide_index=True, use_container_width=True) # Affiche le DataFrame des 3 meilleurs

# -------------------------------
# Contenu de l'Onglet 3 : √âvaluations des √âquipes
# -------------------------------
with tab3:
    st.markdown("## üìä √âvaluations de Performance des √âquipes (Top 10)") # Titre de l'onglet

    col1, col2, col3 = st.columns(3) # Cr√©e trois colonnes pour les diff√©rentes √©valuations

    # Offensive Rating (plus √©lev√© est mieux)
    with col1:
        st.markdown("### √âvaluation Offensive") # Sous-titre
        if "ORTG" in df_team_ratings.columns: # V√©rifie si la colonne existe
            off = df_team_ratings[["TEAM", "ORTG"]].sort_values(by="ORTG", ascending=False).head(10) # Trie et prend les 10 meilleures
            st.dataframe(off, hide_index=True, use_container_width=True) # Affiche le DataFrame
        else:
            st.warning("La colonne 'ORTG' n'a pas √©t√© trouv√©e dans les √©valuations des √©quipes.")

    # Defensive Rating (plus faible est mieux ‚Üí ordre croissant)
    with col2:
        st.markdown("### √âvaluation D√©fensive") # Sous-titre
        if "DRTG" in df_team_ratings.columns: # V√©rifie si la colonne existe
            deff = df_team_ratings[["TEAM", "DRTG"]].sort_values(by="DRTG", ascending=True).head(10) # Trie et prend les 10 meilleures
            st.dataframe(deff, hide_index=True, use_container_width=True) # Affiche le DataFrame
        else:
            st.warning("La colonne 'DRTG' n'a pas √©t√© trouv√©e dans les √©valuations des √©quipes.")

    # Net Rating (plus √©lev√© est mieux)
    with col3:
        st.markdown("### √âvaluation Nette") # Sous-titre
        if "NRTG" in df_team_ratings.columns: # V√©rifie si la colonne existe
            net = df_team_ratings[["TEAM", "NRTG"]].sort_values(by="NRTG", ascending=False).head(10) # Trie et prend les 10 meilleures
            st.dataframe(net, hide_index=True, use_container_width=True) # Affiche le DataFrame
        else:
            st.warning("La colonne 'NRTG' n'a pas √©t√© trouv√©e dans les √©valuations des √©quipes.")

# -------------------------------
# Contenu de l'Onglet 4 : Salaires (filtres simples)
# -------------------------------

with tab4:
    st.markdown("## üí∞ Salaires") # Titre de l'onglet

    # Filtre d'√©quipe
    team_options = ["Toutes les √©quipes"] + sorted(df_salaries["TEAM"].dropna().unique()) # Liste des √©quipes pour le filtre
    team_sel = st.selectbox("√âquipe", team_options, index=0) # S√©lecteur d'√©quipe

    # Filtre le DataFrame par l'√©quipe s√©lectionn√©e
    df_filtered = df_salaries.copy() # Cr√©e une copie du DataFrame des salaires
    if team_sel != "Toutes les √©quipes": # Si une √©quipe sp√©cifique est choisie
        df_filtered = df_filtered[df_filtered["TEAM"] == team_sel] # Filtre le DataFrame

    # Filtre joueur (d√©pend du DataFrame filtr√© par √©quipe)
    player_options = ["Tous les joueurs"] + sorted(df_filtered["PLAYER"].dropna().unique()) # Liste des joueurs pour le filtre
    player_sel = st.selectbox("Joueur", player_options, index=0) # S√©lecteur de joueur

    # Applique le filtre joueur
    if player_sel != "Tous les joueurs": # Si un joueur sp√©cifique est choisi
        df_filtered = df_filtered[df_filtered["PLAYER"] == player_sel] # Filtre le DataFrame

    # Affiche le tableau filtr√©
    st.dataframe(df_filtered, hide_index=True, use_container_width=True) # Affiche le DataFrame des salaires filtr√©